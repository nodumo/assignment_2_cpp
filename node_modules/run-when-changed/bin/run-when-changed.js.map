{"version":3,"sources":["../run-when-changed.js"],"names":["commander","require","runWhenChanged","default","watches","add","key","value","node","length","keys","Object","join","push","usage","description","option","val","parse","process","argv","verbose","gazeOptions","interval","debounce","mode","cwd"],"mappings":";;AAEA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,iBAAiBD,QAAQ,QAAR,EAAkBE,OAAzC;AACA,IAAMC,UAAU,EAAhB;;AAEA,SAASC,GAAT,CAAaC,GAAb,EAAkBC,KAAlB,EAAyB;AACvB,MAAIC,OAAOJ,QAAQA,QAAQK,MAAR,GAAiB,CAAzB,CAAX;;AAEA,MAAID,QAAQF,QAAQ,OAApB,EAA6B;AAC3B,QAAMI,OAAOC,OAAOD,IAAP,CAAYF,IAAZ,EAAkBI,IAAlB,CAAuB,GAAvB,CAAb;AACA,QAAIF,SAAS,OAAb,EAAsB;AACpBF,aAAO,IAAP;AACD;AACF;;AAED,MAAI,CAACA,IAAL,EAAW;AACTA,WAAO,EAAP;AACAJ,YAAQS,IAAR,CAAaL,IAAb;AACD;;AAED,MAAI,CAACA,KAAKF,GAAL,CAAL,EAAgB;AACdE,SAAKF,GAAL,IAAY,EAAZ;AACD;;AAEDE,OAAKF,GAAL,EAAUO,IAAV,CAAeN,KAAf;AACD;;AAEDP,UACGc,KADH,CACS,yFADT,EAEGC,WAFH,CAEe,+DAFf,EAGGC,MAHH,CAGU,oBAHV,EAGgC,qCAHhC,EAGuE;AAAA,SAAOX,IAAI,OAAJ,EAAaY,GAAb,CAAP;AAAA,CAHvE,EAIGD,MAJH,CAIU,kBAJV,EAI8B,kCAJ9B,EAIkE;AAAA,SAAOX,IAAI,MAAJ,EAAYY,GAAZ,CAAP;AAAA,CAJlE,EAKGD,MALH,CAKU,oBALV,EAKgC,wCALhC,EAK0E;AAAA,SAAOX,IAAI,OAAJ,EAAaY,GAAb,CAAP;AAAA,CAL1E,EAMGD,MANH,CAMU,+BANV,EAM2C,kDAN3C,EAOGA,MAPH,CAOU,+BAPV,EAO2C,+EAP3C,EAQGA,MARH,CAQU,8BARV,EASI,8GATJ,EAUGA,MAVH,CAUU,uBAVV,EAUmC,oFAVnC,EAWGA,MAXH,CAWU,WAXV,EAWuB,cAXvB,EAWuCE,KAXvC,CAW6CC,QAAQC,IAXrD;;AAaAlB,eAAeE,OAAf,EAAyB;AACvBiB,WAASrB,UAAUqB,OADI;AAEvBC,eAAa;AACXC,cAAUvB,UAAUuB,QADT;AAEXC,cAAUxB,UAAUwB,QAFT;AAGXC,UAAMzB,UAAUyB,IAHL;AAIXC,SAAK1B,UAAU0B;AAJJ;AAFU,CAAzB","file":"run-when-changed.js","sourcesContent":["\n\nconst commander = require('commander');\nconst runWhenChanged = require('../lib').default;\nconst watches = [];\n\nfunction add(key, value) {\n  var node = watches[watches.length - 1];\n\n  if (node && key === 'watch') {\n    const keys = Object.keys(node).join(' ');\n    if (keys !== 'watch') {\n      node = null;\n    }\n  }\n\n  if (!node) {\n    node = {};\n    watches.push(node);\n  }\n\n  if (!node[key]) {\n    node[key] = [];\n  }\n\n  node[key].push(value);\n}\n\ncommander\n  .usage('--watch <glob> --match [glob] --exec <cmd> (--watch <glob> --match [glob] --exec <cmd>)')\n  .description('Selectively executes commands when watched files are changed.')\n  .option('-w, --watch <glob>', 'A glob to watch, starts a new group', val => add('watch', val))\n  .option('-e, --exec <cmd>', 'Command to execute, eg \"echo %s\"', val => add('exec', val))\n  .option('-m, --match [glob]', 'Only files that match will be executed', val => add('match', val))\n  .option('-i, --interval [milliseconds]', 'Interval to pass to fs.watchFile in milliseconds')\n  .option('-d, --debounce [milliseconds]', 'Delay for events called in succession for the same file/event in milliseconds')\n  .option('-m, --mode [auto|watch|poll]',\n    \"Force the watch mode. Either 'auto' (default), 'watch' (force native events), or 'poll' (force stat polling)\")\n  .option('-c, --cwd [directory]', 'The current working directory to base file patterns from. Default is process.cwd()')\n  .option('--verbose', 'Verbose mode').parse(process.argv);\n\nrunWhenChanged(watches,  {\n  verbose: commander.verbose,\n  gazeOptions: {\n    interval: commander.interval,\n    debounce: commander.debounce,\n    mode: commander.mode,\n    cwd: commander.cwd\n  }\n});\n"]}