{"version":3,"sources":["../index.js"],"names":["runWhenChanged","startWatching","options","watch","match","exec","verbose","list","key","values","map","value","join","log","console","msg","Promise","prefix","gaze","gazeOptions","on","Object","keys","watcher","watched","length","close","relativeFilepath","filepath","replace","process","cwd","forEach","reduce","last","dot","cmd","then","shell","stdio","watches","opts","set"],"mappings":";;;;;kBA+CwBA,c;;AA/CxB;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASC,aAAT,OAA+CC,OAA/C,EAAwD;AAAA,MAA/BC,KAA+B,QAA/BA,KAA+B;AAAA,MAAxBC,KAAwB,QAAxBA,KAAwB;AAAA,MAAjBC,IAAiB,QAAjBA,IAAiB;;AACtD,MAAMC,UAAUJ,QAAQI,OAAxB;AACA,MAAMC,OAAO,SAAPA,IAAO,CAACC,GAAD,EAAMC,MAAN;AAAA,WAAiBA,OAAOC,GAAP,CAAW;AAAA,oBAAcF,GAAd,SAAqB,wBAASG,KAAT,CAArB;AAAA,KAAX,EAAmDC,IAAnD,CAAwD,IAAxD,CAAjB;AAAA,GAAb;AACA,MAAMC,MAAM,SAANA,GAAM,MAAO;AACjB,QAAIP,OAAJ,EAAa;AACXQ,cAAQD,GAAR,CAAYE,GAAZ;AACD;AACF,GAJD;;AAMA,SAAO,IAAIC,OAAJ,CAAY,mBAAW;AAC5BZ,YAAQA,SAAS,CAAE,MAAF,CAAjB;AACA,QAAMa,SAAS,CAAEV,KAAK,OAAL,EAAcJ,KAAd,CAAF,EAAwBI,KAAK,OAAL,EAAcH,KAAd,CAAxB,EAA8CG,KAAK,MAAL,EAAaF,IAAb,CAA9C,EAAmEO,IAAnE,CAAwE,GAAxE,CAAf;AACA,QAAMM,OAAO,eAASf,KAAT,EAAgBD,QAAQiB,WAAxB,CAAb;;AAEAD,SAAKE,EAAL,CAAQ,OAAR,EAAiB,mBAAW;AAC1B,UAAIC,OAAOC,IAAP,CAAYC,QAAQC,OAAR,EAAZ,EAA+BC,MAAnC,EAA2C;AACzCZ,YAAOI,MAAP;AACD,OAFD,MAEO;AACLJ,YAAOI,MAAP;AACAM,gBAAQG,KAAR;AACD;AACF,KAPD;;AASAR,SAAKE,EAAL,CAAQ,SAAR,EAAmB,oBAAY;AAC7B,UAAMO,mBAAmBC,SAASC,OAAT,CAAiBC,QAAQC,GAAR,cAAjB,EAAsC,EAAtC,CAAzB;;AAEA1B,WAAK2B,OAAL,CAAa,eAAO;AAClB,YAAI,CAAC5B,MAAM6B,MAAN,CAAa,UAACC,IAAD,EAAO9B,KAAP;AAAA,iBAAiB8B,QAAQ,yBAAUP,gBAAV,EAA4BvB,KAA5B,EAAmC,EAAE+B,KAAK,IAAP,EAAnC,CAAzB;AAAA,SAAb,EAAyF,IAAzF,CAAL,EAAqG;AACnG,iBAAOtB,IAAOI,MAAP,mBAA2BU,gBAA3B,CAAP;AACD;;AAED,iCAAUS,GAAV,EAAeR,QAAf,EAAyBS,IAAzB,CAA8B,eAAO;AACnCxB,cAAOI,MAAP,UAAkBmB,GAAlB;AACA,oCAAMA,GAAN,EAAW,EAAX,EAAe,EAAEE,OAAO,IAAT,EAAeC,OAAO,SAAtB,EAAf;AACD,SAHD;AAID,OATD;AAUD,KAbD;AAcD,GA5BM,CAAP;AA6BD;;AAEc,SAASvC,cAAT,CAAwBwC,OAAxB,EAAiCC,IAAjC,EAAuC;AACpDD,UAAQR,OAAR,CAAgB;AAAA,WAAO/B,cAAcyC,GAAd,EAAmBD,IAAnB,CAAP;AAAA,GAAhB;AACD","file":"index.js","sourcesContent":["import { Gaze } from 'gaze';\nimport { spawn } from 'child_process';\nimport { sep } from 'path';\nimport ansiBold from 'ansi-bold';\nimport minimatch from 'minimatch';\nimport formatCmd from './format-cmd';\n\nfunction startWatching({ watch, match, exec }, options) {\n  const verbose = options.verbose;\n  const list = (key, values) => values.map(value => `--${key}=${ansiBold(value)}`).join(', ');\n  const log = msg => {\n    if (verbose) {\n      console.log(msg);\n    }\n  };\n\n  return new Promise(resolve => {\n    match = match || [ '**/*' ];\n    const prefix = [ list('watch', watch), list('match', match), list('exec', exec) ].join(' ');\n    const gaze = new Gaze(watch, options.gazeOptions);\n\n    gaze.on('ready', watcher => {\n      if (Object.keys(watcher.watched()).length) {\n        log(`${prefix}: ready!`);\n      } else {\n        log(`${prefix}: no matches :(`);\n        watcher.close();\n      }\n    });\n\n    gaze.on('changed', filepath => {\n      const relativeFilepath = filepath.replace(process.cwd() + sep, '');\n\n      exec.forEach(cmd => {\n        if (!match.reduce((last, match) => last && minimatch(relativeFilepath, match, { dot: true }), true)) {\n          return log(`${prefix}: skipping ${relativeFilepath}`);\n        }\n\n        formatCmd(cmd, filepath).then(cmd => {\n          log(`${prefix}: ${cmd}`);\n          spawn(cmd, [], { shell: true, stdio: 'inherit' });\n        });\n      });\n    });\n  })\n}\n\nexport default function runWhenChanged(watches, opts) {\n  watches.forEach(set => startWatching(set, opts));\n}\n"]}